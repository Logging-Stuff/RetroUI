{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tooltip",
  "type": "registry:component",
  "title": "Tooltip",
  "author": "Ankan Bhattacharya <https://github.com/ankan002>",
  "description": "A cool way to give your users a hint of what a component does...ðŸ˜‰",
  "dependencies": ["@radix-ui/react-tooltip", "class-variance-authority"],
  "files": [
    {
      "path": "components/retroui/Tooltip.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\";\n\nimport { cn } from \"@/lib/utils\";\nimport { cva, VariantProps } from \"class-variance-authority\";\n\nconst tooltipContentVariants = cva(\n  \"z-50 overflow-hidden border-2 border-border bg-background px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        primary: \"bg-primary text-primary-foreground\",\n        solid: \"bg-black text-white\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nconst TooltipProvider = TooltipPrimitive.Provider;\n\nconst Tooltip = TooltipPrimitive.Root;\n\nconst TooltipTrigger = TooltipPrimitive.Trigger;\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content> &\n    VariantProps<typeof tooltipContentVariants>\n>(({ className, sideOffset = 4, variant, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        tooltipContentVariants({\n          variant,\n          className,\n        }),\n      )}\n      {...props}\n    />\n  </TooltipPrimitive.Portal>\n));\nTooltipContent.displayName = TooltipPrimitive.Content.displayName;\n\nconst TooltipObject = Object.assign(Tooltip, {\n  Trigger: TooltipTrigger,\n  Content: TooltipContent,\n  Provider: TooltipProvider,\n});\n\nexport { TooltipObject as Tooltip };\n",
      "type": "registry:component",
      "target": "components/retroui/Tooltip.tsx"
    }
  ]
}
